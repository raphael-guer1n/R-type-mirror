Network Working Group                                        R-Type Team
Request for Comments: XXXX                                   September 2025
Category: Experimental


                   R-Type Multiplayer Protocol (Draft)


Status of this Memo

   This memo provides information for the R-Type multiplayer project.
   Distribution of this memo is unlimited.

Abstract

   This document specifies the UDP-based protocol used by the R-Type
   multiplayer project. It defines packet formats, semantics, and the
   expected message flow between client and server. The protocol borrows
   from the Quake networking model: compact client commands, delta
   snapshots, and sequence/ack numbers for robustness.


1. Introduction

   The R-Type protocol is a custom application-layer protocol built on
   top of UDP. It follows a server-authoritative model where the server
   controls the game state and clients transmit input commands. The
   design is optimized for low latency, efficient bandwidth usage, and
   synchronization across multiple players.

   Compared to a simple fixed-struct protocol, this version introduces:
   - An acknowledgment number (ack) in headers.
   - Batched input commands (UserCmd).
   - Delta-compressed snapshots.


2. Conventions Used in This Document

   The key words "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY"
   are to be interpreted as described in RFC 2119.

   All integers are little-endian unless otherwise specified.
   Floating point values use IEEE-754 binary32 (32-bit), little-endian.
   All packets start with a fixed-size header.
   Time is expressed in ticks, synchronized by the server.
   UDP is used as transport; no retransmission is guaranteed.


3. Packet Header

   Every packet begins with an 8-byte header:

      0               1               2               3
      +-------+-------+---------------+---------------+
      | Type  | Size  |     Sequence Number (32)      |
      +-------+-------+---------------+---------------+

   Fields:
      - type: 16-bit unsigned integer, packet type
      - size: 16-bit unsigned integer, payload size in bytes (header excluded)
      - seq:  32-bit unsigned integer, incremented per packet


4. Packet Types

   4.1 CONNECT_REQ (0x01)

      Sent by client to request connection.
         - clientId (32 bits)

   4.2 CONNECT_ACK (0x02)

      Sent by server in response to CONNECT_REQ.
         - serverId       (32 bits)
         - playerEntityId (32 bits)
         - tickRate       (32 bits)

   4.3 INPUT (0x03)

      Sent by client to report keys pressed at a given tick.

      Fields:
         - clientId  (32-bit unsigned)
         - tick      (32-bit unsigned)
         - keyCount  (16-bit unsigned)
         - keys      (keyCount Ã— 32-bit signed integers)

   4.4 SNAPSHOT (0x04)

      Sent by server to broadcast world state.

      Snapshot header:
         - tick        (32-bit unsigned)
         - entityCount (16-bit unsigned)

      EntityState (repeated entityCount times):
         - entityId  (32-bit unsigned)
         - x         (float32)
         - y         (float32)
         - vx        (float32)
         - vy        (float32)
         - type      (8-bit unsigned)
         - hp        (8-bit unsigned)
         - collided  (8-bit unsigned, 0 or 1)

   4.5 EVENT (0x05)

      Sent by server for discrete events.
         - tick      (32-bit unsigned)
         - eventType (16-bit unsigned)
         - entityId  (32-bit unsigned)

   4.6 PING (0x06) / PONG (0x07)

      Used for latency measurement and keep-alive.
         - timestamp (64-bit unsigned, format implementation-defined)


5. Message Flow

   1. Connection:
      Client -> CONNECT_REQ
      Server -> CONNECT_ACK

   2. Game Loop:
      Client -> INPUT (keys)
      Server -> SNAPSHOT (world state)
      Server -> EVENT (when needed)

   3. Keep-alive:
      Client -> PING
      Server -> PONG


6. Error Handling

   - Packets with invalid type or size MUST be discarded.
   - Clients inactive for >5 seconds (no INPUT/PING) SHOULD be dropped.
   - seq MAY be used to detect out-of-order packets; there is no ack field.


7. Security Considerations

   The protocol assumes a trusted LAN or coursework environment.
   No encryption or authentication is provided.
   For production, DTLS or TLS SHOULD be considered.


Author's Address

   R-Type Team
   Epitech
   Contact: project-rtype@example.com
