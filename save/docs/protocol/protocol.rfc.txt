Network Working Group                                        R-Type Team
Request for Comments: XXXX                                   September 2025
Category: Experimental


                   R-Type Multiplayer Protocol (Draft)


Status of this Memo

   This memo provides information for the R-Type multiplayer project.
   Distribution of this memo is unlimited.

Abstract

   This document specifies the UDP-based protocol used by the R-Type
   multiplayer project. It defines packet formats, semantics, and the
   expected message flow between client and server.


1. Introduction

   The R-Type protocol is a custom application-layer protocol built on
   top of UDP. It follows a server-authoritative model where the server
   controls the game state and clients send input. The protocol is
   optimized for low latency, simplicity, and synchronization between
   players.


2. Conventions Used in This Document

   The key words "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY"
   are to be interpreted as described in RFC 2119.

   All integers are little-endian unless otherwise specified.
   All packets start with a fixed-size header.
   Time is expressed in ticks, synchronized by the server.
   UDP is used as transport; no reliability is guaranteed.


3. Packet Header

   Every packet begins with an 8-byte header:

      0               1               2               3
      +-------+-------+---------------+---------------+
      | Type  | Size  |     Sequence Number (32)      |
      +-------+-------+---------------+---------------+

   Fields:

      - type: 16-bit unsigned integer indicating the packet type
      - size: 16-bit unsigned integer, total size of the packet
      - seq:  32-bit unsigned integer, incremented per packet


4. Packet Types

   4.1 CONNECT_REQ (0x01)

      Sent by client to request connection.

         - clientId (32 bits)

   4.2 CONNECT_ACK (0x02)

      Sent by server in response to CONNECT_REQ.

         - serverId       (32 bits)
         - playerEntityId (32 bits)
         - tickRate       (32 bits)

   4.3 INPUT (0x03)

      Sent by client each tick to report input.

         - playerId (32 bits)
         - tick     (32 bits)
         - inputs   (8 bits) bitmask of pressed keys

      Bitmask:
         bit 0 = UP
         bit 1 = DOWN
         bit 2 = LEFT
         bit 3 = RIGHT
         bit 4 = SHOOT

   4.4 SNAPSHOT (0x04)

      Sent by server to broadcast world state.

      SnapshotHeader:
         - tick        (32 bits)
         - entityCount (16 bits)

      EntityState (repeated entityCount times):
         - entityId (32 bits)
         - x        (float, 32 bits)
         - y        (float, 32 bits)
         - vx       (float, 32 bits)
         - vy       (float, 32 bits)
         - type     (8 bits)
         - hp       (8 bits)

   4.5 EVENT (0x05)

      Sent by server to notify critical events.

         - eventId (32 bits)
         - data    (32 bits)

      Examples: player death, enemy spawn, explosion.

   4.6 PING (0x06) / PONG (0x07)

      Used for latency measurement and keep-alive.

         - time (64 bits, microseconds)


5. Message Flow

   1. Connection:
      Client -> CONNECT_REQ
      Server -> CONNECT_ACK

   2. Game Loop:
      Client -> INPUT (each tick)
      Server -> SNAPSHOT (periodically)
      Server -> EVENT (when needed)

   3. Keep-alive:
      Client -> PING
      Server -> PONG


6. Error Handling

   - Packets with invalid type or size MUST be discarded.
   - Clients not sending INPUT or PING for >5 seconds SHOULD be dropped.
   - Sequence numbers MAY be used to discard out-of-order packets.


7. Security Considerations

   The protocol assumes a trusted LAN or controlled environment.
   No encryption or authentication is included.
   For production, DTLS or TLS SHOULD be considered.


Author's Address

   R-Type Team
   Epitech
   Contact: project-rtype@example.com
